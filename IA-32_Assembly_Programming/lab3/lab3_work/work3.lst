     1                                           ;代码清单11-1
     2                                           ;文件名：c11_mbr.asm
     3                                           ;文件说明：硬盘主引导扇区代码 
     4                                           ;创建日期：2011-5-16 19:54
     5                                  
     6                                           ;设置堆栈段和栈指针 
     7 00000000 8CC8                             mov ax,cs      
     8 00000002 8ED0                             mov ss,ax
     9 00000004 BC007C                           mov sp,0x7c00
    10                                        
    11                                           ;计算GDT所在的逻辑段地址 
    12 00000007 2EA1[437D]                       mov ax,[cs:gdt_base+0x7c00]        ;低16位 
    13 0000000B 2E8B16[457D]                     mov dx,[cs:gdt_base+0x7c00+0x02]   ;高16位 
    14 00000010 BB1000                           mov bx,16        
    15 00000013 F7F3                             div bx            
    16 00000015 8ED8                             mov ds,ax                          ;令DS指向该段以进行操作
    17 00000017 89D3                             mov bx,dx                          ;段内起始偏移地址 
    18                                        
    19                                           ;创建0#描述符，它是空描述符，这是处理器的要求
    20 00000019 66C70700000000                   mov dword [bx+0x00],0x00
    21 00000020 66C7470400000000                 mov dword [bx+0x04],0x00  
    22                                  
    23                                           ;创建#1描述符，保护模式下的代码段描述符
    24 00000028 66C74708FF01007C                 mov dword [bx+0x08],0x7c0001ff     
    25 00000030 66C7470C00984000                 mov dword [bx+0x0c],0x00409800     
    26                                  
    27                                           ;创建#2描述符，保护模式下的数据段描述符（文本模式下的显示缓冲区） 
    28 00000038 66C74710FFFF0080                 mov dword [bx+0x10],0x8000ffff     
    29 00000040 66C747140B924000                 mov dword [bx+0x14],0x0040920b     
    30                                  
    31                                           ;创建#3描述符，保护模式下的堆栈段描述符
    32 00000048 66C74718007A0000                 mov dword [bx+0x18],0x00007a00
    33 00000050 66C7471C00964000                 mov dword [bx+0x1c],0x00409600
    34                                  
    35                                           ;初始化描述符表寄存器GDTR
    36 00000058 2EC706[417D]1F00                 mov word [cs: gdt_size+0x7c00],31  ;描述符表的界限（总字节数减一）   
    37                                                                               
    38 0000005F 2E0F0116[417D]                   lgdt [cs: gdt_size+0x7c00]
    39                                        
    40 00000065 E492                             in al,0x92                         ;南桥芯片内的端口 
    41 00000067 0C02                             or al,0000_0010B
    42 00000069 E692                             out 0x92,al                        ;打开A20
    43                                  
    44 0000006B FA                               cli                                ;保护模式下中断机制尚未建立，应 
    45                                                                              ;禁止中断 
    46 0000006C 0F20C0                           mov eax,cr0
    47 0000006F 660D01000000                     or eax,1
    48 00000075 0F22C0                           mov cr0,eax                        ;设置PE位
    49                                        
    50                                           ;以下进入保护模式... ...
    51 00000078 66EA[80000000]0800               jmp dword 0x0008:flush             ;16位的描述符选择子：32位偏移
    52                                                                              ;清流水线并串行化处理器 
    53                                           [bits 32] 
    54                                  
    55                                      flush:
    56 00000080 66B91000                         mov cx,00000000000_10_000B         ;加载数据段选择子(0x10)
    57 00000084 8ED9                             mov ds,cx
    58                                  
    59                                           ;以下在屏幕上显示"Protect mode OK." 
    60 00000086 C6050000000050                   mov byte [0x00],'P'  
    61 0000008D C6050200000072                   mov byte [0x02],'r'
    62 00000094 C605040000006F                   mov byte [0x04],'o'
    63 0000009B C6050600000074                   mov byte [0x06],'t'
    64 000000A2 C6050800000065                   mov byte [0x08],'e'
    65 000000A9 C6050A00000063                   mov byte [0x0a],'c'
    66 000000B0 C6050C00000074                   mov byte [0x0c],'t'
    67 000000B7 C6050E00000020                   mov byte [0x0e],' '
    68 000000BE C605100000006D                   mov byte [0x10],'m'
    69 000000C5 C605120000006F                   mov byte [0x12],'o'
    70 000000CC C6051400000064                   mov byte [0x14],'d'
    71 000000D3 C6051600000065                   mov byte [0x16],'e'
    72 000000DA C6051800000020                   mov byte [0x18],' '
    73 000000E1 C6051A0000004F                   mov byte [0x1a],'O'
    74 000000E8 C6051C0000004B                   mov byte [0x1c],'K'
    75                                  
    76                                           ;以下用简单的示例来帮助阐述32位保护模式下的堆栈操作 
    77 000000EF 66B91800                         mov cx,00000000000_11_000B         ;加载堆栈段选择子
    78 000000F3 8ED1                             mov ss,cx
    79 000000F5 BC007C0000                       mov esp,0x7c00
    80                                  
    81                                  ;===========================================================================
    82                                  
    83 000000FA 31C0                             xor eax,eax
    84 000000FC 31C9                             xor ecx,ecx
    85                                    @@:
    86 000000FE 41                               inc ecx
    87 000000FF 01C8                             add eax,ecx
    88 00000101 81F9E8030000                     cmp ecx,1000
    89 00000107 7CF5                             jl @@
    90                                  
    91                                  
    92                                  	;以下计算累加和的每个数位，存到堆栈
    93 00000109 BB0A000000                       mov ebx,10
    94 0000010E 31C9                             xor ecx,ecx
    95                                       @d:
    96 00000110 41                               inc ecx
    97 00000111 31D2                             xor edx,edx
    98 00000113 F7F3                             div ebx
    99 00000115 80CA30                           or dl,0x30
   100 00000118 52                               push edx    
   101 00000119 3D00000000                       cmp eax,0
   102 0000011E 75F0                             jne @d
   103                                  
   104                                  ;把堆栈中的数移动到显示缓冲区
   105 00000120 BB20000000              	 mov ebx,0x0020
   106                                       @b:
   107 00000125 5A                      	 pop edx
   108 00000126 8813                    	 mov [ebx],dl
   109 00000128 43                      	 inc ebx
   110 00000129 43                      	 inc ebx
   111 0000012A E2F9                    	 loop @b
   112                                  
   113                                  
   114                                  
   115                                  ;===============================================================================
   116 0000012C 89E5                             mov ebp,esp                        ;保存堆栈指针 
   117 0000012E 6A2E                             push byte '.'                      ;压入立即数（字节）
   118                                           
   119 00000130 81ED04000000                     sub ebp,4
   120 00000136 39E5                             cmp ebp,esp                        ;判断压入立即数时，ESP是否减4 
   121 00000138 7506                             jnz ghalt                          
   122 0000013A 58                               pop eax
   123 0000013B A21E000000                       mov [0x1e],al                      ;显示句点 
   124                                        
   125                                    ghalt:     
   126 00000140 F4                               hlt                                ;已经禁止中断，将不会被唤醒 
   127                                  
   128                                  ;-------------------------------------------------------------------------------
   129                                       
   130 00000141 0000                             gdt_size         dw 0
   131 00000143 007E0000                         gdt_base         dd 0x00007e00     ;GDT的物理地址 
   132                                                               
   133 00000147 00<rept>                         times 510-($-$$) db 0
   134 000001FE 55AA                                              db 0x55,0xaa
