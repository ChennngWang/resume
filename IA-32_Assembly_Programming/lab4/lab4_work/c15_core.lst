     1                                           ;代码清单15-1
     2                                           ;文件名：c15_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2011-11-19 21:40
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [F1030000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 740B                             jz .exit
    44 00000007 E808000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D E9EFFFFFFF                       jmp .getc
    47                                  
    48                                    .exit:
    49 00000012 59                               pop ecx
    50 00000013 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用 
    55                                                                              ;输入：CL=字符ASCII码 
    56 00000014 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000015 66BAD403                         mov dx,0x3d4
    60 00000019 B00E                             mov al,0x0e
    61 0000001B EE                               out dx,al
    62 0000001C 6642                             inc dx                             ;0x3d5
    63 0000001E EC                               in al,dx                           ;高字
    64 0000001F 88C4                             mov ah,al
    65                                  
    66 00000021 664A                             dec dx                             ;0x3d4
    67 00000023 B00F                             mov al,0x0f
    68 00000025 EE                               out dx,al
    69 00000026 6642                             inc dx                             ;0x3d5
    70 00000028 EC                               in al,dx                           ;低字
    71 00000029 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 0000002C 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002F 7511                             jnz .put_0a
    75 00000031 6689D8                           mov ax,bx
    76 00000034 B350                             mov bl,80
    77 00000036 F6F3                             div bl
    78 00000038 F6E3                             mul bl
    79 0000003A 6689C3                           mov bx,ax
    80 0000003D E965000000                       jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 00000042 80F90A                           cmp cl,0x0a                        ;换行符？
    84 00000045 750A                             jnz .put_other
    85 00000047 6681C35000                       add bx,80
    86 0000004C E915000000                       jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000051 06                               push es
    90 00000052 B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
    91 00000057 8EC0                             mov es,eax
    92 00000059 66D1E3                           shl bx,1
    93 0000005C 2667880F                         mov [es:bx],cl
    94 00000060 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000061 66D1EB                           shr bx,1
    98 00000064 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 00000066 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 0000006B 7C3A                             jl .set_cursor
   103                                  
   104 0000006D 1E                               push ds
   105 0000006E 06                               push es
   106 0000006F B820000000                       mov eax,video_ram_seg_sel
   107 00000074 8ED8                             mov ds,eax
   108 00000076 8EC0                             mov es,eax
   109 00000078 FC                               cld
   110 00000079 BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d 
   111 0000007E BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx 
   112 00000083 B980070000                       mov ecx,1920
   113 00000088 F3A5                             rep movsd
   114 0000008A 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   115 0000008E B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   116                                    .cls:
   117 00000093 266766C7072007                   mov word[es:bx],0x0720
   118 0000009A 6681C30200                       add bx,2
   119 0000009F E2F2                             loop .cls
   120                                  
   121 000000A1 07                               pop es
   122 000000A2 1F                               pop ds
   123                                  
   124 000000A3 66BB8007                         mov bx,1920
   125                                  
   126                                    .set_cursor:
   127 000000A7 66BAD403                         mov dx,0x3d4
   128 000000AB B00E                             mov al,0x0e
   129 000000AD EE                               out dx,al
   130 000000AE 6642                             inc dx                             ;0x3d5
   131 000000B0 88F8                             mov al,bh
   132 000000B2 EE                               out dx,al
   133 000000B3 664A                             dec dx                             ;0x3d4
   134 000000B5 B00F                             mov al,0x0f
   135 000000B7 EE                               out dx,al
   136 000000B8 6642                             inc dx                             ;0x3d5
   137 000000BA 88D8                             mov al,bl
   138 000000BC EE                               out dx,al
   139                                  
   140 000000BD 61                               popad
   141                                           
   142 000000BE C3                               ret                                
   143                                  
   144                                  ;-------------------------------------------------------------------------------
   145                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   146                                                                              ;EAX=逻辑扇区号
   147                                                                              ;DS:EBX=目标缓冲区地址
   148                                                                              ;返回：EBX=EBX+512
   149 000000BF 50                               push eax 
   150 000000C0 51                               push ecx
   151 000000C1 52                               push edx
   152                                        
   153 000000C2 50                               push eax
   154                                           
   155 000000C3 66BAF201                         mov dx,0x1f2
   156 000000C7 B001                             mov al,1
   157 000000C9 EE                               out dx,al                          ;读取的扇区数
   158                                  
   159 000000CA 6642                             inc dx                             ;0x1f3
   160 000000CC 58                               pop eax
   161 000000CD EE                               out dx,al                          ;LBA地址7~0
   162                                  
   163 000000CE 6642                             inc dx                             ;0x1f4
   164 000000D0 B108                             mov cl,8
   165 000000D2 D3E8                             shr eax,cl
   166 000000D4 EE                               out dx,al                          ;LBA地址15~8
   167                                  
   168 000000D5 6642                             inc dx                             ;0x1f5
   169 000000D7 D3E8                             shr eax,cl
   170 000000D9 EE                               out dx,al                          ;LBA地址23~16
   171                                  
   172 000000DA 6642                             inc dx                             ;0x1f6
   173 000000DC D3E8                             shr eax,cl
   174 000000DE 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   175 000000E0 EE                               out dx,al
   176                                  
   177 000000E1 6642                             inc dx                             ;0x1f7
   178 000000E3 B020                             mov al,0x20                        ;读命令
   179 000000E5 EE                               out dx,al
   180                                  
   181                                    .waits:
   182 000000E6 EC                               in al,dx
   183 000000E7 2488                             and al,0x88
   184 000000E9 3C08                             cmp al,0x08
   185 000000EB 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   186                                  
   187 000000ED B900010000                       mov ecx,256                        ;总共要读取的字数
   188 000000F2 66BAF001                         mov dx,0x1f0
   189                                    .readw:
   190 000000F6 66ED                             in ax,dx
   191 000000F8 668903                           mov [ebx],ax
   192 000000FB 81C302000000                     add ebx,2
   193 00000101 E2F3                             loop .readw
   194                                  
   195 00000103 5A                               pop edx
   196 00000104 59                               pop ecx
   197 00000105 58                               pop eax
   198                                        
   199 00000106 CB                               retf                               ;段间返回 
   200                                  
   201                                  ;-------------------------------------------------------------------------------
   202                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   203                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   204                                                                              ;一个双字并推进光标 
   205                                                                              ;输入：EDX=要转换并显示的数字
   206                                                                              ;输出：无
   207 00000107 60                               pushad
   208 00000108 1E                               push ds
   209                                        
   210 00000109 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   211 0000010D 8ED8                             mov ds,ax
   212                                        
   213 0000010F BB[D5040000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   214 00000114 B908000000                       mov ecx,8
   215                                    .xlt:    
   216 00000119 C1C204                           rol edx,4
   217 0000011C 89D0                             mov eax,edx
   218 0000011E 250F000000                       and eax,0x0000000f
   219 00000123 D7                               xlat
   220                                        
   221 00000124 51                               push ecx
   222 00000125 88C1                             mov cl,al                           
   223 00000127 E8E8FEFFFF                       call put_char
   224 0000012C 59                               pop ecx
   225                                         
   226 0000012D E2EA                             loop .xlt
   227                                        
   228 0000012F 1F                               pop ds
   229 00000130 61                               popad
   230 00000131 CB                               retf
   231                                        
   232                                  ;-------------------------------------------------------------------------------
   233                                  allocate_memory:                            ;分配内存
   234                                                                              ;输入：ECX=希望分配的字节数
   235                                                                              ;输出：ECX=起始线性地址 
   236 00000132 1E                               push ds
   237 00000133 50                               push eax
   238 00000134 53                               push ebx
   239                                        
   240 00000135 B830000000                       mov eax,core_data_seg_sel
   241 0000013A 8ED8                             mov ds,eax
   242                                        
   243 0000013C A1[06000000]                     mov eax,[ram_alloc]
   244 00000141 01C8                             add eax,ecx                        ;下一次分配时的起始地址
   245                                        
   246                                           ;这里应当有检测可用内存数量的指令
   247                                            
   248 00000143 8B0D[06000000]                   mov ecx,[ram_alloc]                ;返回分配的起始地址
   249                                  
   250 00000149 89C3                             mov ebx,eax
   251 0000014B 81E3FCFFFFFF                     and ebx,0xfffffffc
   252 00000151 81C304000000                     add ebx,4                          ;强制对齐 
   253 00000157 A903000000                       test eax,0x00000003                ;下次分配的起始地址最好是4字节对齐
   254 0000015C 0F45C3                           cmovnz eax,ebx                     ;如果没有对齐，则强制对齐 
   255 0000015F A3[06000000]                     mov [ram_alloc],eax                ;下次从该地址分配内存
   256                                                                              ;cmovcc指令可以避免控制转移 
   257 00000164 5B                               pop ebx
   258 00000165 58                               pop eax
   259 00000166 1F                               pop ds
   260                                  
   261 00000167 CB                               retf
   262                                  
   263                                  ;-------------------------------------------------------------------------------
   264                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   265                                                                              ;输入：EDX:EAX=描述符 
   266                                                                              ;输出：CX=描述符的选择子
   267 00000168 50                               push eax
   268 00000169 53                               push ebx
   269 0000016A 52                               push edx
   270                                  
   271 0000016B 1E                               push ds
   272 0000016C 06                               push es
   273                                  
   274 0000016D BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   275 00000172 8EDB                             mov ds,ebx
   276                                  
   277 00000174 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   278                                  
   279 0000017B BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   280 00000180 8EC3                             mov es,ebx
   281                                  
   282 00000182 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   283 00000189 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   284 0000018B 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   285                                  
   286 00000191 268903                           mov [es:ebx],eax
   287 00000194 26895304                         mov [es:ebx+4],edx
   288                                  
   289 00000198 668105[00000000]08-              add word [pgdt],8                  ;增加一个描述符的大小
   290 000001A0 00                 
   291                                  
   292 000001A1 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   293                                  
   294 000001A8 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   295 000001AE 6631D2                           xor dx,dx
   296 000001B1 66BB0800                         mov bx,8
   297 000001B5 66F7F3                           div bx                             ;除以8，去掉余数
   298 000001B8 6689C1                           mov cx,ax
   299 000001BB 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   300                                  
   301 000001BF 07                               pop es
   302 000001C0 1F                               pop ds
   303                                  
   304 000001C1 5A                               pop edx
   305 000001C2 5B                               pop ebx
   306 000001C3 58                               pop eax
   307                                  
   308 000001C4 CB                               retf
   309                                  ;-------------------------------------------------------------------------------
   310                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   311                                                                              ;输入：EAX=线性基地址
   312                                                                              ;      EBX=段界限
   313                                                                              ;      ECX=属性。各属性位都在原始
   314                                                                              ;          位置，无关的位清零 
   315                                                                              ;返回：EDX:EAX=描述符
   316 000001C5 89C2                             mov edx,eax
   317 000001C7 C1E010                           shl eax,16
   318 000001CA 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   319                                  
   320 000001CD 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   321 000001D3 C1C208                           rol edx,8
   322 000001D6 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   323                                  
   324 000001D8 6631DB                           xor bx,bx
   325 000001DB 09DA                             or edx,ebx                         ;装配段界限的高4位
   326                                  
   327 000001DD 09CA                             or edx,ecx                         ;装配属性
   328                                  
   329 000001DF CB                               retf
   330                                  
   331                                  ;-------------------------------------------------------------------------------
   332                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   333                                                                              ;输入：EAX=门代码在段内偏移地址
   334                                                                              ;       BX=门代码所在段的选择子 
   335                                                                              ;       CX=段类型及属性等（各属
   336                                                                              ;          性位都在原始位置）
   337                                                                              ;返回：EDX:EAX=完整的描述符
   338 000001E0 53                               push ebx
   339 000001E1 51                               push ecx
   340                                        
   341 000001E2 89C2                             mov edx,eax
   342 000001E4 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   343 000001EA 6609CA                           or dx,cx                           ;组装属性部分到EDX
   344                                         
   345 000001ED 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   346 000001F2 C1E310                           shl ebx,16                          
   347 000001F5 09D8                             or eax,ebx                         ;组装段选择子部分
   348                                        
   349 000001F7 59                               pop ecx
   350 000001F8 5B                               pop ebx
   351                                        
   352 000001F9 CB                               retf                                   
   353                                                               
   354                                  ;-------------------------------------------------------------------------------
   355                                  terminate_current_task:                     ;终止当前任务
   356                                                                              ;注意，执行此例程时，当前任务仍在
   357                                                                              ;运行中。此例程其实也是当前任务的
   358                                                                              ;一部分 
   359 000001FA 9C                               pushfd
   360 000001FB 8B1424                           mov edx,[esp]                      ;获得EFLAGS寄存器内容
   361 000001FE 81C404000000                     add esp,4                          ;恢复堆栈指针
   362                                  
   363 00000204 B830000000                       mov eax,core_data_seg_sel
   364 00000209 8ED8                             mov ds,eax
   365                                  
   366 0000020B 66F7C20040                       test dx,0100_0000_0000_0000B       ;测试NT位
   367 00000210 7512                             jnz .b1                            ;当前任务是嵌套的，到.b1执行iretd 
   368 00000212 BB[EB0E0000]                     mov ebx,core_msg1                  ;当前任务不是嵌套的，直接切换到 
   369 00000217 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   370 0000021E FF2D[270D0000]                   jmp far [prgman_tss]               ;程序管理器任务 
   371                                         
   372                                    .b1: 
   373 00000224 BB[5E0E0000]                     mov ebx,core_msg0
   374 00000229 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   375 00000230 CF                               iretd
   376                                        
   377                                  sys_routine_end:
   378                                  
   379                                  ;===============================================================================
   380                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   381                                  ;------------------------------------------------------------------------------- 
   382 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   383 00000002 00000000                                          dd  0
   384                                  
   385 00000006 00001000                         ram_alloc        dd  0x00100000    ;下次分配内存时的起始地址
   386                                  
   387                                           ;符号地址检索表
   388                                           salt:
   389 0000000A 405072696E74537472-              salt_1           db  '@PrintString'
   390 00000013 696E67             
   391 00000016 00<rept>                                     times 256-($-salt_1) db 0
   392 0000010A [00000000]                                        dd  put_string
   393 0000010E 2800                                              dw  sys_routine_seg_sel
   394                                  
   395 00000110 40526561644469736B-              salt_2           db  '@ReadDiskData'
   396 00000119 44617461           
   397 0000011D 00<rept>                                     times 256-($-salt_2) db 0
   398 00000210 [BF000000]                                        dd  read_hard_disk_0
   399 00000214 2800                                              dw  sys_routine_seg_sel
   400                                  
   401 00000216 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   402 0000021F 726441734865785374-
   403 00000228 72696E67           
   404 0000022C 00<rept>                                     times 256-($-salt_3) db 0
   405 00000316 [07010000]                                        dd  put_hex_dword
   406 0000031A 2800                                              dw  sys_routine_seg_sel
   407                                  
   408 0000031C 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   409 00000325 6550726F6772616D   
   410 0000032D 00<rept>                                     times 256-($-salt_4) db 0
   411 0000041C [FA010000]                                        dd  terminate_current_task
   412 00000420 2800                                              dw  sys_routine_seg_sel
   413                                  
   414                                           salt_item_len   equ $-salt_4
   415                                           salt_items      equ ($-salt)/salt_item_len
   416                                  
   417 00000422 2020496620796F7520-              message_1        db  '  If you seen this message,that means we '
   418 0000042B 7365656E2074686973-
   419 00000434 206D6573736167652C-
   420 0000043D 74686174206D65616E-
   421 00000446 7320776520         
   422 0000044B 617265206E6F772069-                               db  'are now in protect mode,and the system '
   423 00000454 6E2070726F74656374-
   424 0000045D 206D6F64652C616E64-
   425 00000466 207468652073797374-
   426 0000046F 656D20             
   427 00000472 636F7265206973206C-                               db  'core is loaded,and the video display '
   428 0000047B 6F616465642C616E64-
   429 00000484 207468652076696465-
   430 0000048D 6F20646973706C6179-
   431 00000496 20                 
   432 00000497 726F7574696E652077-                               db  'routine works perfectly.',0x0d,0x0a,0
   433 000004A0 6F726B732070657266-
   434 000004A9 6563746C792E0D0A00 
   435                                  
   436 000004B2 202053797374656D20-              message_2        db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   437 000004BB 776964652043414C4C-
   438 000004C4 2D47415445206D6F75-
   439 000004CD 6E7465642E0D0A00   
   440                                           
   441 000004D5 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   442 000004DE 39414243444546     
   443                                                                              ;put_hex_dword子过程用的查找表 
   444                                  
   445 000004E5 00<rept>                         core_buf   times 2048 db 0         ;内核用的缓冲区
   446                                  
   447 00000CE5 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   448 00000CEA 00<rept>                         cpu_brand  times 52 db 0
   449 00000D1E 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   450                                  
   451                                           ;任务控制块链
   452 00000D23 00000000                         tcb_chain        dd  0
   453                                  
   454                                           ;程序管理器的任务信息 
   455 00000D27 00000000                         prgman_tss       dd  0             ;程序管理器的TSS基地址
   456 00000D2B 0000                                              dw  0             ;程序管理器的TSS描述符选择子 
   457                                  
   458 00000D2D 0D0A                             prgman_msg1      db  0x0d,0x0a
   459 00000D2F 5B50524F4752414D20-                               db  '[PROGRAM MANAGER]: Hello! I am Program Manager,'
   460 00000D38 4D414E414745525D3A-
   461 00000D41 2048656C6C6F212049-
   462 00000D4A 20616D2050726F6772-
   463 00000D53 616D204D616E616765-
   464 00000D5C 722C               
   465 00000D5E 72756E206174204350-                               db  'run at CPL=0.Now,create user task and switch '
   466 00000D67 4C3D302E4E6F772C63-
   467 00000D70 726561746520757365-
   468 00000D79 72207461736B20616E-
   469 00000D82 642073776974636820 
   470 00000D8B 746F20697420627920-                               db  'to it by the CALL instruction...',0x0d,0x0a,0
   471 00000D94 7468652043414C4C20-
   472 00000D9D 696E73747275637469-
   473 00000DA6 6F6E2E2E2E0D0A00   
   474                                                   
   475 00000DAE 0D0A                             prgman_msg2      db  0x0d,0x0a
   476 00000DB0 5B50524F4752414D20-                               db  '[PROGRAM MANAGER]: I am glad to regain control.'
   477 00000DB9 4D414E414745525D3A-
   478 00000DC2 204920616D20676C61-
   479 00000DCB 6420746F2072656761-
   480 00000DD4 696E20636F6E74726F-
   481 00000DDD 6C2E               
   482 00000DDF 4E6F772C6372656174-                               db  'Now,create another user task and switch to '
   483 00000DE8 6520616E6F74686572-
   484 00000DF1 207573657220746173-
   485 00000DFA 6B20616E6420737769-
   486 00000E03 74636820746F20     
   487 00000E0A 697420627920746865-                               db  'it by the JMP instruction...',0x0d,0x0a,0
   488 00000E13 204A4D5020696E7374-
   489 00000E1C 72756374696F6E2E2E-
   490 00000E25 2E0D0A00           
   491                                                   
   492 00000E29 0D0A                             prgman_msg3      db  0x0d,0x0a
   493 00000E2B 5B50524F4752414D20-                               db  '[PROGRAM MANAGER]: I am gain control again,'
   494 00000E34 4D414E414745525D3A-
   495 00000E3D 204920616D20676169-
   496 00000E46 6E20636F6E74726F6C-
   497 00000E4F 20616761696E2C     
   498 00000E56 48414C542E2E2E00                                  db  'HALT...',0
   499                                  
   500 00000E5E 0D0A                             core_msg0        db  0x0d,0x0a
   501 00000E60 5B53595354454D2043-                               db  '[SYSTEM CORE]: Uh...This task initiated with '
   502 00000E69 4F52455D3A2055682E-
   503 00000E72 2E2E54686973207461-
   504 00000E7B 736B20696E69746961-
   505 00000E84 746564207769746820 
   506 00000E8D 43414C4C20696E7374-                               db  'CALL instruction or an exeception/ interrupt,'
   507 00000E96 72756374696F6E206F-
   508 00000E9F 7220616E2065786563-
   509 00000EA8 657074696F6E2F2069-
   510 00000EB1 6E746572727570742C 
   511 00000EBA 73686F756C64207573-                               db  'should use IRETD instruction to switch back...'
   512 00000EC3 652049524554442069-
   513 00000ECC 6E737472756374696F-
   514 00000ED5 6E20746F2073776974-
   515 00000EDE 6368206261636B2E2E-
   516 00000EE7 2E                 
   517 00000EE8 0D0A00                                            db  0x0d,0x0a,0
   518                                  
   519 00000EEB 0D0A                             core_msg1        db  0x0d,0x0a
   520 00000EED 5B53595354454D2043-                               db  '[SYSTEM CORE]: Uh...This task initiated with '
   521 00000EF6 4F52455D3A2055682E-
   522 00000EFF 2E2E54686973207461-
   523 00000F08 736B20696E69746961-
   524 00000F11 746564207769746820 
   525 00000F1A 4A4D5020696E737472-                               db  'JMP instruction,  should switch to Program '
   526 00000F23 756374696F6E2C2020-
   527 00000F2C 73686F756C64207377-
   528 00000F35 6974636820746F2050-
   529 00000F3E 726F6772616D20     
   530 00000F45 4D616E616765722064-                               db  'Manager directly by the JMP instruction...'
   531 00000F4E 69726563746C792062-
   532 00000F57 7920746865204A4D50-
   533 00000F60 20696E737472756374-
   534 00000F69 696F6E2E2E2E       
   535 00000F6F 0D0A00                                            db  0x0d,0x0a,0
   536                                  
   537                                  core_data_end:
   538                                                 
   539                                  ;===============================================================================
   540                                  SECTION core_code vstart=0
   541                                  ;-------------------------------------------------------------------------------
   542                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   543                                                                              ;输入：EDX:EAX=描述符
   544                                                                              ;          EBX=TCB基地址
   545                                                                              ;输出：CX=描述符的选择子
   546 00000000 50                               push eax
   547 00000001 52                               push edx
   548 00000002 57                               push edi
   549 00000003 1E                               push ds
   550                                  
   551 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   552 00000009 8ED9                             mov ds,ecx
   553                                  
   554 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   555                                           
   556 0000000E 31C9                             xor ecx,ecx
   557 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   558 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   559                                           
   560 00000016 89040F                           mov [edi+ecx+0x00],eax
   561 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   562                                  
   563 0000001D 6681C10800                       add cx,8                           
   564 00000022 6649                             dec cx                             ;得到新的LDT界限值 
   565                                  
   566 00000024 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   567                                  
   568 00000028 6689C8                           mov ax,cx
   569 0000002B 6631D2                           xor dx,dx
   570 0000002E 66B90800                         mov cx,8
   571 00000032 66F7F1                           div cx
   572                                           
   573 00000035 6689C1                           mov cx,ax
   574 00000038 66C1E103                         shl cx,3                           ;左移3位，并且
   575 0000003C 6681C90400                       or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   576                                  
   577 00000041 1F                               pop ds
   578 00000042 5F                               pop edi
   579 00000043 5A                               pop edx
   580 00000044 58                               pop eax
   581                                       
   582 00000045 C3                               ret
   583                                           
   584                                  ;------------------------------------------------------------------------------- 
   585                                  load_relocate_program:                      ;加载并重定位用户程序
   586                                                                              ;输入: PUSH 逻辑扇区号
   587                                                                              ;      PUSH 任务控制块基地址
   588                                                                              ;输出：无 
   589 00000046 60                               pushad
   590                                        
   591 00000047 1E                               push ds
   592 00000048 06                               push es
   593                                        
   594 00000049 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   595                                        
   596 0000004B B908000000                       mov ecx,mem_0_4_gb_seg_sel
   597 00000050 8EC1                             mov es,ecx
   598                                        
   599 00000052 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   600                                  
   601                                           ;以下申请创建LDT所需要的内存
   602 00000055 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   603 0000005A 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   604 00000061 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   605 00000065 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   606                                  
   607                                           ;以下开始加载用户程序 
   608 0000006C B830000000                       mov eax,core_data_seg_sel
   609 00000071 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   610                                         
   611 00000073 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   612 00000076 BB[E5040000]                     mov ebx,core_buf                   ;读取程序头部数据     
   613 0000007B 9A[BF000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   614                                  
   615                                           ;以下判断整个程序有多大
   616 00000082 A1[E5040000]                     mov eax,[core_buf]                 ;程序尺寸
   617 00000087 89C3                             mov ebx,eax
   618 00000089 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   619 0000008F 81C300020000                     add ebx,512                        ;9位都为0 
   620 00000095 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   621 0000009A 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   622                                        
   623 0000009D 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   624 0000009F 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   625 000000A6 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中
   626                                        
   627 000000AA 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   628 000000AC 31D2                             xor edx,edx
   629 000000AE B900020000                       mov ecx,512
   630 000000B3 F7F1                             div ecx
   631 000000B5 89C1                             mov ecx,eax                        ;总扇区数 
   632                                        
   633 000000B7 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   634 000000BC 8ED8                             mov ds,eax
   635                                  
   636 000000BE 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   637                                    .b1:
   638 000000C1 9A[BF000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   639 000000C8 40                               inc eax
   640 000000C9 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   641                                  
   642 000000CB 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   643                                  
   644                                           ;建立程序头部段描述符
   645 000000CF 89F8                             mov eax,edi                        ;程序头部起始线性地址
   646 000000D1 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   647 000000D4 4B                               dec ebx                            ;段界限
   648 000000D5 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3 
   649 000000DA 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   650                                        
   651                                           ;安装头部段描述符到LDT中 
   652 000000E1 89F3                             mov ebx,esi                        ;TCB的基地址
   653 000000E3 E818FFFFFF                       call fill_descriptor_in_ldt
   654                                  
   655 000000E8 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   656 000000ED 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   657 000000F2 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   658                                        
   659                                           ;建立程序代码段描述符
   660 000000F6 89F8                             mov eax,edi
   661 000000F8 034714                           add eax,[edi+0x14]                 ;代码起始线性地址
   662 000000FB 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   663 000000FE 4B                               dec ebx                            ;段界限
   664 000000FF B900F84000                       mov ecx,0x0040f800                 ;字节粒度的代码段描述符，特权级3
   665 00000104 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   666 0000010B 89F3                             mov ebx,esi                        ;TCB的基地址
   667 0000010D E8EEFEFFFF                       call fill_descriptor_in_ldt
   668 00000112 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   669 00000117 66894F14                         mov [edi+0x14],cx                  ;登记代码段选择子到头部
   670                                  
   671                                           ;建立程序数据段描述符
   672 0000011B 89F8                             mov eax,edi
   673 0000011D 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   674 00000120 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   675 00000123 4B                               dec ebx                            ;段界限 
   676 00000124 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3
   677 00000129 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   678 00000130 89F3                             mov ebx,esi                        ;TCB的基地址
   679 00000132 E8C9FEFFFF                       call fill_descriptor_in_ldt
   680 00000137 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   681 0000013C 66894F1C                         mov [edi+0x1c],cx                  ;登记数据段选择子到头部
   682                                  
   683                                           ;建立程序堆栈段描述符
   684 00000140 8B4F0C                           mov ecx,[edi+0x0c]                 ;4KB的倍率 
   685 00000143 BBFFFF0F00                       mov ebx,0x000fffff
   686 00000148 29CB                             sub ebx,ecx                        ;得到段界限
   687 0000014A B800100000                       mov eax,4096                        
   688 0000014F F7E1                             mul ecx                         
   689 00000151 89C1                             mov ecx,eax                        ;准备为堆栈分配内存 
   690 00000153 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   691 0000015A 01C8                             add eax,ecx                        ;得到堆栈的高端物理地址 
   692 0000015C B900F6C000                       mov ecx,0x00c0f600                 ;字节粒度的堆栈段描述符，特权级3
   693 00000161 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   694 00000168 89F3                             mov ebx,esi                        ;TCB的基地址
   695 0000016A E891FEFFFF                       call fill_descriptor_in_ldt
   696 0000016F 6681C90300                       or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   697 00000174 66894F08                         mov [edi+0x08],cx                  ;登记堆栈段选择子到头部
   698                                  
   699                                           ;重定位SALT 
   700 00000178 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   701 0000017D 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   702                                                                              ;过4GB段访问用户程序头部          
   703 0000017F B830000000                       mov eax,core_data_seg_sel
   704 00000184 8ED8                             mov ds,eax
   705                                        
   706 00000186 FC                               cld
   707                                  
   708 00000187 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   709 0000018B 81C728000000                     add edi,0x28                       ;U-SALT在4GB段内的偏移 
   710                                    .b2: 
   711 00000191 51                               push ecx
   712 00000192 57                               push edi
   713                                        
   714 00000193 B904000000                       mov ecx,salt_items
   715 00000198 BE[0A000000]                     mov esi,salt
   716                                    .b3:
   717 0000019D 57                               push edi
   718 0000019E 56                               push esi
   719 0000019F 51                               push ecx
   720                                  
   721 000001A0 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   722 000001A5 F3A7                             repe cmpsd                         ;每次比较4字节 
   723 000001A7 7519                             jnz .b4
   724 000001A9 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   725 000001AB 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   726 000001B2 668B4604                         mov ax,[esi+4]
   727 000001B6 660D0300                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   728                                                                              ;故RPL=3 
   729 000001BA 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   730                                    .b4:
   731                                        
   732 000001C2 59                               pop ecx
   733 000001C3 5E                               pop esi
   734 000001C4 81C606010000                     add esi,salt_item_len
   735 000001CA 5F                               pop edi                            ;从头比较 
   736 000001CB E2D0                             loop .b3
   737                                        
   738 000001CD 5F                               pop edi
   739 000001CE 81C700010000                     add edi,256
   740 000001D4 59                               pop ecx
   741 000001D5 E2BA                             loop .b2
   742                                  
   743 000001D7 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   744                                  
   745                                           ;创建0特权级堆栈
   746 000001DA B900100000                       mov ecx,4096
   747 000001DF 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备 
   748 000001E1 26894E1A                         mov [es:esi+0x1a],ecx
   749 000001E5 26C16E1A0C                       shr dword [es:esi+0x1a],12         ;登记0特权级堆栈尺寸到TCB 
   750 000001EA 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   751 000001F1 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   752 000001F3 2689461E                         mov [es:esi+0x1e],eax              ;登记0特权级堆栈基地址到TCB 
   753 000001F7 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   754 000001FC B90096C000                       mov ecx,0x00c09600                 ;4KB粒度，读写，特权级0
   755 00000201 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   756 00000208 89F3                             mov ebx,esi                        ;TCB的基地址
   757 0000020A E8F1FDFFFF                       call fill_descriptor_in_ldt
   758                                           ;or cx,0000_0000_0000_0000          ;设置选择子的特权级为0
   759 0000020F 2666894E22                       mov [es:esi+0x22],cx               ;登记0特权级堆栈选择子到TCB
   760 00000214 26C7462400000000                 mov dword [es:esi+0x24],0          ;登记0特权级堆栈初始ESP到TCB
   761                                        
   762                                           ;创建1特权级堆栈
   763 0000021C B900100000                       mov ecx,4096
   764 00000221 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   765 00000223 26894E28                         mov [es:esi+0x28],ecx
   766 00000227 26C06E280C                       shr [es:esi+0x28],12               ;登记1特权级堆栈尺寸到TCB
   767 0000022C 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   768 00000233 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   769 00000235 2689462C                         mov [es:esi+0x2c],eax              ;登记1特权级堆栈基地址到TCB
   770 00000239 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   771 0000023E B900B6C000                       mov ecx,0x00c0b600                 ;4KB粒度，读写，特权级1
   772 00000243 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   773 0000024A 89F3                             mov ebx,esi                        ;TCB的基地址
   774 0000024C E8AFFDFFFF                       call fill_descriptor_in_ldt
   775 00000251 6681C90100                       or cx,0000_0000_0000_0001          ;设置选择子的特权级为1
   776 00000256 2666894E30                       mov [es:esi+0x30],cx               ;登记1特权级堆栈选择子到TCB
   777 0000025B 26C7463200000000                 mov dword [es:esi+0x32],0          ;登记1特权级堆栈初始ESP到TCB
   778                                  
   779                                           ;创建2特权级堆栈
   780 00000263 B900100000                       mov ecx,4096
   781 00000268 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   782 0000026A 26894E36                         mov [es:esi+0x36],ecx
   783 0000026E 26C06E360C                       shr [es:esi+0x36],12               ;登记2特权级堆栈尺寸到TCB
   784 00000273 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   785 0000027A 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   786 0000027C 26894E3A                         mov [es:esi+0x3a],ecx              ;登记2特权级堆栈基地址到TCB
   787 00000280 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   788 00000285 B900D6C000                       mov ecx,0x00c0d600                 ;4KB粒度，读写，特权级2
   789 0000028A 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   790 00000291 89F3                             mov ebx,esi                        ;TCB的基地址
   791 00000293 E868FDFFFF                       call fill_descriptor_in_ldt
   792 00000298 6681C90A00                       or cx,0000_0000_0000_0010          ;设置选择子的特权级为2
   793 0000029D 2666894E3E                       mov [es:esi+0x3e],cx               ;登记2特权级堆栈选择子到TCB
   794 000002A2 26C7464000000000                 mov dword [es:esi+0x40],0          ;登记2特权级堆栈初始ESP到TCB
   795                                        
   796                                           ;在GDT中登记LDT描述符
   797 000002AA 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   798 000002AE 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   799 000002B3 B900824000                       mov ecx,0x00408200                 ;LDT描述符，特权级0
   800 000002B8 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   801 000002BF 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   802 000002C6 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   803                                         
   804                                           ;创建用户程序的TSS
   805 000002CB B968000000                       mov ecx,104                        ;tss的基本尺寸
   806 000002D0 2666894E12                       mov [es:esi+0x12],cx              
   807 000002D5 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB 
   808 000002DA 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   809 000002E1 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
   810                                        
   811                                           ;登记基本的TSS表格内容
   812 000002E5 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   813                                        
   814 000002EB 268B5624                         mov edx,[es:esi+0x24]              ;登记0特权级堆栈初始ESP
   815 000002EF 26895104                         mov [es:ecx+4],edx                 ;到TSS中
   816                                        
   817 000002F3 26668B5622                       mov dx,[es:esi+0x22]               ;登记0特权级堆栈段选择子
   818 000002F8 2666895108                       mov [es:ecx+8],dx                  ;到TSS中
   819                                        
   820 000002FD 268B5632                         mov edx,[es:esi+0x32]              ;登记1特权级堆栈初始ESP
   821 00000301 2689510C                         mov [es:ecx+12],edx                ;到TSS中
   822                                  
   823 00000305 26668B5630                       mov dx,[es:esi+0x30]               ;登记1特权级堆栈段选择子
   824 0000030A 2666895110                       mov [es:ecx+16],dx                 ;到TSS中
   825                                  
   826 0000030F 268B5640                         mov edx,[es:esi+0x40]              ;登记2特权级堆栈初始ESP
   827 00000313 26895114                         mov [es:ecx+20],edx                ;到TSS中
   828                                  
   829 00000317 26668B563E                       mov dx,[es:esi+0x3e]               ;登记2特权级堆栈段选择子
   830 0000031C 2666895118                       mov [es:ecx+24],dx                 ;到TSS中
   831                                  
   832 00000321 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
   833 00000326 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
   834                                        
   835 0000032B 26668B5612                       mov dx,[es:esi+0x12]               ;登记任务的I/O位图偏移
   836 00000330 2666895166                       mov [es:ecx+102],dx                ;到TSS中 
   837                                        
   838 00000335 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   839                                        
   840 0000033C 26C7411C00000000                 mov dword [es:ecx+28],0            ;登记CR3(PDBR)
   841                                        
   842                                           ;访问用户程序头部，获取数据填充TSS 
   843 00000344 8B5D2C                           mov ebx,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   844 00000347 268B7B06                         mov edi,[es:ebx+0x06]              ;用户程序加载的基地址 
   845                                  
   846 0000034B 268B5710                         mov edx,[es:edi+0x10]              ;登记程序入口点（EIP） 
   847 0000034F 26895120                         mov [es:ecx+32],edx                ;到TSS
   848                                  
   849 00000353 26668B5714                       mov dx,[es:edi+0x14]               ;登记程序代码段（CS）选择子
   850 00000358 266689514C                       mov [es:ecx+76],dx                 ;到TSS中
   851                                  
   852 0000035D 26668B5708                       mov dx,[es:edi+0x08]               ;登记程序堆栈段（SS）选择子
   853 00000362 2666895150                       mov [es:ecx+80],dx                 ;到TSS中
   854                                  
   855 00000367 26668B5704                       mov dx,[es:edi+0x04]               ;登记程序数据段（DS）选择子
   856 0000036C 2666895154                       mov word [es:ecx+84],dx            ;到TSS中。注意，它指向程序头部段
   857                                        
   858 00000371 2666C741480000                   mov word [es:ecx+72],0             ;TSS中的ES=0
   859                                  
   860 00000378 2666C741580000                   mov word [es:ecx+88],0             ;TSS中的FS=0
   861                                  
   862 0000037F 2666C7415C0000                   mov word [es:ecx+92],0             ;TSS中的GS=0
   863                                  
   864 00000386 9C                               pushfd
   865 00000387 5A                               pop edx
   866                                           
   867 00000388 26895124                         mov dword [es:ecx+36],edx          ;EFLAGS
   868                                  
   869                                           ;在GDT中登记TSS描述符
   870 0000038C 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
   871 00000390 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   872 00000395 B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
   873 0000039A 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   874 000003A1 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   875 000003A8 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   876                                  
   877 000003AD 07                               pop es                             ;恢复到调用此过程前的es段 
   878 000003AE 1F                               pop ds                             ;恢复到调用此过程前的ds段
   879                                        
   880 000003AF 61                               popad
   881                                        
   882 000003B0 C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   883                                        
   884                                  ;-------------------------------------------------------------------------------
   885                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   886                                                                              ;输入：ECX=TCB线性基地址
   887 000003B3 50                               push eax
   888 000003B4 52                               push edx
   889 000003B5 1E                               push ds
   890 000003B6 06                               push es
   891                                           
   892 000003B7 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   893 000003BC 8ED8                             mov ds,eax
   894 000003BE B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   895 000003C3 8EC0                             mov es,eax
   896                                           
   897 000003C5 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   898                                                                              ;后一个TCB
   899                                                                               
   900 000003CC A1[230D0000]                     mov eax,[tcb_chain]                ;TCB表头指针
   901 000003D1 09C0                             or eax,eax                         ;链表为空？
   902 000003D3 7411                             jz .notcb 
   903                                           
   904                                    .searc:
   905 000003D5 89C2                             mov edx,eax
   906 000003D7 268B02                           mov eax,[es: edx+0x00]
   907 000003DA 09C0                             or eax,eax               
   908 000003DC 75F7                             jnz .searc
   909                                           
   910 000003DE 26890A                           mov [es: edx+0x00],ecx
   911 000003E1 E906000000                       jmp .retpc
   912                                           
   913                                    .notcb:       
   914 000003E6 890D[230D0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   915                                           
   916                                    .retpc:
   917 000003EC 07                               pop es
   918 000003ED 1F                               pop ds
   919 000003EE 5A                               pop edx
   920 000003EF 58                               pop eax
   921                                           
   922 000003F0 C3                               ret
   923                                           
   924                                  ;-------------------------------------------------------------------------------
   925                                  start:
   926 000003F1 B930000000                       mov ecx,core_data_seg_sel          ;令DS指向核心数据段 
   927 000003F6 8ED9                             mov ds,ecx
   928                                  
   929 000003F8 B908000000                       mov ecx,mem_0_4_gb_seg_sel         ;令ES指向4GB数据段 
   930 000003FD 8EC1                             mov es,ecx
   931                                  
   932 000003FF BB[22040000]                     mov ebx,message_1                    
   933 00000404 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   934                                                                           
   935                                           ;显示处理器品牌信息 
   936 0000040B B802000080                       mov eax,0x80000002
   937 00000410 0FA2                             cpuid
   938 00000412 A3[EA0C0000]                     mov [cpu_brand + 0x00],eax
   939 00000417 891D[EE0C0000]                   mov [cpu_brand + 0x04],ebx
   940 0000041D 890D[F20C0000]                   mov [cpu_brand + 0x08],ecx
   941 00000423 8915[F60C0000]                   mov [cpu_brand + 0x0c],edx
   942                                        
   943 00000429 B803000080                       mov eax,0x80000003
   944 0000042E 0FA2                             cpuid
   945 00000430 A3[FA0C0000]                     mov [cpu_brand + 0x10],eax
   946 00000435 891D[FE0C0000]                   mov [cpu_brand + 0x14],ebx
   947 0000043B 890D[020D0000]                   mov [cpu_brand + 0x18],ecx
   948 00000441 8915[060D0000]                   mov [cpu_brand + 0x1c],edx
   949                                  
   950 00000447 B804000080                       mov eax,0x80000004
   951 0000044C 0FA2                             cpuid
   952 0000044E A3[0A0D0000]                     mov [cpu_brand + 0x20],eax
   953 00000453 891D[0E0D0000]                   mov [cpu_brand + 0x24],ebx
   954 00000459 890D[120D0000]                   mov [cpu_brand + 0x28],ecx
   955 0000045F 8915[160D0000]                   mov [cpu_brand + 0x2c],edx
   956                                  
   957 00000465 BB[E50C0000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   958 0000046A 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   959 00000471 BB[EA0C0000]                     mov ebx,cpu_brand
   960 00000476 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   961 0000047D BB[1E0D0000]                     mov ebx,cpu_brnd1
   962 00000482 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   963                                  
   964                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   965 00000489 BF[0A000000]                     mov edi,salt                       ;C-SALT表的起始位置 
   966 0000048E B904000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
   967                                    .b3:
   968 00000493 51                               push ecx   
   969 00000494 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
   970 0000049A 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
   971 000004A1 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
   972                                                                              ;允许访问)，0个参数(因为用寄存器
   973                                                                              ;传递参数，而没有用栈) 
   974 000004A5 9A[E0010000]2800                 call sys_routine_seg_sel:make_gate_descriptor
   975 000004AC 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   976 000004B3 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
   977 000004BA 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
   978 000004C0 59                               pop ecx
   979 000004C1 E2D0                             loop .b3
   980                                  
   981                                           ;对门进行测试 
   982 000004C3 BB[B2040000]                     mov ebx,message_2
   983 000004C8 FF1D[0A010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
   984                                        
   985                                           ;为程序管理器的TSS分配内存空间 
   986 000004CE B968000000                       mov ecx,104                        ;为该任务的TSS分配内存
   987 000004D3 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
   988 000004DA 890D[270D0000]                   mov [prgman_tss+0x00],ecx          ;保存程序管理器的TSS基地址 
   989                                        
   990                                           ;在程序管理器的TSS中设置必要的项目 
   991 000004E0 2666C741600000                   mov word [es:ecx+96],0             ;没有LDT。处理器允许没有LDT的任务。
   992 000004E7 2666C741666700                   mov word [es:ecx+102],103          ;没有I/O位图。0特权级事实上不需要。
   993 000004EE 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   994 000004F4 26C7411C00000000                 mov dword [es:ecx+28],0            ;登记CR3(PDBR)
   995 000004FC 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   996                                                                              ;不需要0、1、2特权级堆栈。0特级不
   997                                                                              ;会向低特权级转移控制。
   998                                           
   999                                           ;创建TSS描述符，并安装到GDT中 
  1000 00000503 89C8                             mov eax,ecx                        ;TSS的起始线性地址
  1001 00000505 BB67000000                       mov ebx,103                        ;段长度（界限）
  1002 0000050A B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
  1003 0000050F 9A[C5010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1004 00000516 9A[68010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1005 0000051D 66890D[2B0D0000]                 mov [prgman_tss+0x04],cx           ;保存程序管理器的TSS描述符选择子 
  1006                                  
  1007                                           ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
  1008                                           ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
  1009 00000524 0F00D9                           ltr cx                              
  1010                                  
  1011                                           ;现在可认为“程序管理器”任务正执行中
  1012 00000527 BB[2D0D0000]                     mov ebx,prgman_msg1
  1013 0000052C 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1014                                  
  1015 00000533 B946000000                       mov ecx,0x46
  1016 00000538 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
  1017 0000053F E86FFEFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中 
  1018                                        
  1019 00000544 6832000000                       push dword 50                      ;用户程序位于逻辑50扇区
  1020 00000549 51                               push ecx                           ;压入任务控制块起始线性地址 
  1021                                         
  1022 0000054A E8F7FAFFFF                       call load_relocate_program         
  1023                                        
  1024 0000054F 26FF5914                         call far [es:ecx+0x14]             ;执行任务切换。和上一章不同，任务切
  1025                                                                              ;换时要恢复TSS内容，所以在创建任务
  1026                                                                              ;时TSS要填写完整 
  1027                                                                            
  1028                                           ;重新加载并切换任务 
  1029 00000553 BB[AE0D0000]                     mov ebx,prgman_msg2
  1030 00000558 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1031                                  
  1032 0000055F B946000000                       mov ecx,0x46
  1033 00000564 9A[32010000]2800                 call sys_routine_seg_sel:allocate_memory
  1034 0000056B E843FEFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中
  1035                                  
  1036 00000570 6864000000                       push dword 100                     ;用户程序位于逻辑50扇区
  1037 00000575 51                               push ecx                           ;压入任务控制块起始线性地址
  1038                                  
  1039 00000576 E8CBFAFFFF                       call load_relocate_program
  1040                                  
  1041 0000057B 26FF6914                         jmp far [es:ecx+0x14]              ;执行任务切换
  1042                                  
  1043 0000057F BB[290E0000]                     mov ebx,prgman_msg3
  1044 00000584 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1045                                  
  1046 0000058B F4                               hlt
  1047                                              
  1048                                  core_code_end:
  1049                                  
  1050                                  ;-------------------------------------------------------------------------------
  1051                                  SECTION core_trail
  1052                                  ;-------------------------------------------------------------------------------
  1053                                  core_end:
